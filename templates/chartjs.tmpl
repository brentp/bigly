<!DOCTYPE html>
<html>
    <head>
    <meta charset="utf-8" />
    <title>bigly</title>

<style>
@import url('https://fonts.googleapis.com/css?family=Montserrat');
body {
 font-family: 'Montserrat', serif;
}

#errors {
	font-color: #dd1111;
}

.container {
  height: 100%;
  min-height: 800px;
}
</style>
    </head>
	<script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>
	<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.3.0/Chart.bundle.js"></script>
	<script type="text/javascript" src="https://igv.org/web/release/1.0.5/igv-1.0.5.js"></script>
	<link rel="stylesheet" type="text/css" href="https://igv.org/web/release/1.0.5/igv-1.0.5.css">



-<!-- see: http://mourner.github.io/simplify-js/ -->
    <body>
               <label>Use left/right arrow keys to pan and +/- to zoom.</label>
        <p>
               <span id="errors"></span>
        </p>

<div id="igvDiv" style="padding:5px; border:1px solid lightgray"></div>
        <div class="container" id="parent">

                       {{ range $sm, $path := .BamPath }}
                <div>
                    <label for="{{$sm}}">{{$sm}}</label> <span id="sm_{{$sm}}"></span>
                                       <canvas id="{{$sm}}" height="220" ></canvas>
                </div>
                       {{end}}
        </div>
    </body>

    <script>
var plots = {}

jQuery('body').on('keyup', function(e) {
	reg = cleanregion(jQuery('.igvNavigationSearchInput').val())

	if (e.keyCode != 37 && e.keyCode != 39 && e.keyCode != 189 && e.keyCode != 187) {
		return false;
	}
	var match = /([^:]+):([^-]+)-(.*)/.exec(reg);
	var left = e.keyCode == 37
    var zoom = e.keyCode > 100
	match[2] = parseInt(match[2])
	match[3] = parseInt(match[3])
	var range = match[3] - match[2];
	if(left) {
		match[2] -= range * 0.25;
		match[3] -= range * 0.25;
	} else if (!zoom) {
		match[2] += range * 0.25;
		match[3] += range * 0.25;
	} else if (e.keyCode == 189) { // zoom out
		match[2] -= range * 0.25;
		match[3] += range * 0.25;

	} else {
		match[2] += range * 0.25;
		match[3] -= range * 0.25;
		if (match[2] > match[3]) {
			tmp = match[2];
			match[2] = match[3];
			match[3] = tmp;
		}
	}
	jQuery('.igvNavigationSearchInput').val(match[1] + ":" + parseInt(match[2]) + "-" + parseInt(match[3])).trigger('change')
	return false;
})

var COLORS = ["#ffffff","#f0f0f0","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525","#000000"]
var COLORS = ['#33cc33', '#ffff66', '#4d79ff', '#ddd']
var COLORS = ['#00264d', '#b300b3', '#4d79ff', '#ddd']
Chart.defaults.global.legend.usePointStyle = true
Chart.defaults.line.cubicInterpolationMode = 'monotone'

function updatePlot(json, id) {
	var ds = json.data.datasets;
	ds[0].borderColor = COLORS[0];
	ds[1].borderColor = COLORS[1];
	ds[0].backgroundColor = 'white';
	ds[1].backgroundColor = 'white';

	ds[2].borderColor = COLORS[2];
	ds[2].backgroundColor = COLORS[2];
	ds[3].borderColor = COLORS[3];
	ds[0].fill = false
	ds[1].fill = false
	ds[2].fill = false
	ds[0].showLine = true
	ds[1].showLine = true
	ds[0].pointRadius = 7
	ds[0].borderWidth = 3

	ds[1].pointRadius = 7
	ds[1].borderWidth = 3

	ds[2].pointRadius = 0
	ds[3].pointRadius = 0
	for(i=0;i<4;i++){
        //json.options.scales.yAxes[i].scaleLabel.fontColor = COLORS[i];
        json.options.scales.yAxes[i].ticks = {fontColor: COLORS[i]}
        if(i < 3){
            json.options.scales.yAxes[i].gridLines = {display: false}
        }
            json.options.scales.yAxes[i].legend = {display: false}

		ds[i].spanGaps = false
		ds[i].lineTension = 0
	}

    var ctx = document.getElementById(id).getContext("2d");
	if(plots[id] !== undefined) {
		plots[id].destroy()
	}
	plots[id] = new Chart(ctx, json)

}

  jQuery(document).ready(function () {

        var div = jQuery("#igvDiv")[0],
                options = {
                    showNavigation: true,
                    showRuler: true,
                    locus: "{{ .Region }}",
                    reference: {
                        id: "hg19"
                    },
                    tracks: [
                        {
                            name: "Genes",
                            type: "annotation",
                            format: "bed",
                            sourceType: "file",
                            url: "https://s3.amazonaws.com/igv.broadinstitute.org/annotations/hg19/genes/refGene.hg19.bed.gz",
                            indexURL: "https://s3.amazonaws.com/igv.broadinstitute.org/annotations/hg19/genes/refGene.hg19.bed.gz.tbi",
                            order: Number.MAX_VALUE,
                            visibilityWindow: 300000000,
                            displayMode: "COLLAPSED"
                        }
                    ]
                };

        igv.createBrowser(div, options);
		jQuery('.igvNavigationSearchInput').trigger('change')

    });


function cleanregion(reg) {
    return reg.replace(/,/g, "").replace(/^chr/, "");
}

jQuery(document).ready(function(){


jQuery('.igvNavigationSearchInput').on('change', function() {
    var region = cleanregion($(this).val());

    jQuery('#parent canvas').each(function(i, div) {
        var div = div;
        jQuery('#errors').html(""); // TODO this hides errors from other samples.
		console.log("getting: ", "data/" + div.id + "/" + region)
        jQuery.getJSON("data/" + div.id + "/" + region, function(json) {
            if(i != 0){
                json.chart.options.legend = {display: false}
            }
            updatePlot(json.chart, div.id);
            jQuery('#sm_' + div.id).html(json.gt)
            console.log(json.gt)
        }).fail(function(e) {
            console.log(e.error(), div.id)
            jQuery('#errors').html("error getting json for " + div.id )
        })
            
    })
})

})

</script>
</body>
</html>
